/*!
@file BaseMath.h
@brief 計算ネームスペース
@copyright WiZ Tamura Hiroki,Yamanoi Yasushi MIT License (MIT).
 MIT License URL: https://opensource.org/license/mit
*/

#pragma once

#include "stdafx.h"
namespace basecross {


	namespace bsm {

		struct Vec2;
		struct Vec3;
		struct Vec4;
		struct Quat;
		struct Mat3x3;
		struct Mat4x4;

		//--------------------------------------------------------------------------------------
		///	Vec2（2DVec）
		//--------------------------------------------------------------------------------------
		struct Vec2 : public XMFLOAT2
		{
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ
			*/
			//--------------------------------------------------------------------------------------
			inline Vec2();
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ
			@param[in]	vec	Vec2構造体
			*/
			//--------------------------------------------------------------------------------------
			inline Vec2(const Vec2& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ(zは無視される)
			@param[in]	vec	Vec3構造体
			*/
			//--------------------------------------------------------------------------------------
			explicit inline Vec2(const Vec3& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ(z,wは無視される)
			@param[in]	vec	Vec3構造体
			*/
			//--------------------------------------------------------------------------------------
			explicit inline Vec2(const Vec4& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ
			@param[in]	v	XMFLOAT2構造体
			*/
			//--------------------------------------------------------------------------------------
			explicit inline Vec2(const XMFLOAT2& v);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ
			@param[in]	x	X値
			@param[in]	y	Y値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec2(float x, float y);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ（同じ値に初期化）
			@param[in]	val	値
			*/
			//--------------------------------------------------------------------------------------
			explicit inline Vec2(float val);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ（XMVECTORで初期化）
			@param[in]	vec	値
			*/
			//--------------------------------------------------------------------------------------
			explicit inline Vec2(const XMVECTOR& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	XMVECTORへのキャスト（thisをキャストして返す）
			@return	XMVECTOR型の値
			*/
			//--------------------------------------------------------------------------------------
			inline operator XMVECTOR() const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	Vec2からの代入
			@param[in]	other	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec2& operator =(const Vec2& other);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	Vec3からの代入(zは無視される)
			@param[in]	other	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec2& operator =(const Vec3& other);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	Vec4からの代入(z,wは無視される)
			@param[in]	other	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec2& operator =(const Vec4& other);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	XMFLOAT2からの代入
			@param[in]	other	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec2& operator=(const XMFLOAT2& other);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	XMVECTORからの代入
			@param[in]	other	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec2& operator=(const XMVECTOR& other);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	Vec2と同値チェック
			@param[in]	other	相手
			@return	同値ならtrue
			*/
			//--------------------------------------------------------------------------------------
			inline bool operator==(const Vec2& other)const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	Vec2と非同値チェック
			@param[in]	other	相手
			@return	非同値ならtrue
			*/
			//--------------------------------------------------------------------------------------
			inline bool operator!=(const Vec2& other)const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	インデックスによるの代入
			@param[in]	idx	0=X,1=Y
			@param[in]	value	値
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec2& setElem(int idx, float value);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	インデックスによる値の参照
			@param[in]	idx	0=X,1=Y
			@return	値
			*/
			//--------------------------------------------------------------------------------------
			inline float getElem(int idx) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	[]による値の代入
			@param[in]	idx	0=X,1=Y
			@return	値
			*/
			//--------------------------------------------------------------------------------------
			inline float& operator [](int idx);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	[]による値の参照
			@param[in]	idx	0=X,1=Y
			@return	値
			*/
			//--------------------------------------------------------------------------------------
			inline float operator [](int idx) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	加算
			@param[in]	vec	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec2 operator +(const Vec2& vec) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	加算
			@param[in]	val	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec2 operator +(float val) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	減算
			@param[in]	vec	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec2 operator -(const Vec2& vec) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	減算
			@param[in]	val	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec2 operator -(float val) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	乗算
			@param[in]	vec	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec2 operator *(const Vec2& vec) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	乗算（float）
			@param[in]	val	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec2 operator *(float val) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief		徐算
			@param[in]	vec	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec2 operator /(const Vec2& vec) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	除算（float）
			@param[in]	val	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec2 operator /(float val) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追加算
			@param[in]	vec	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec2& operator +=(const Vec2& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追加算
			@param[in]	val	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec2& operator +=(float val);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追減算
			@param[in]	vec	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec2& operator -=(const Vec2& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追減算
			@param[in]	val	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec2& operator -=(float val);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追乗算
			@param[in]	vec	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec2& operator *=(const Vec2& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追乗算
			@param[in]	val	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec2& operator *=(float val);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追除算
			@param[in]	vec	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec2& operator /=(const Vec2& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追除算
			@param[in]	val	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec2& operator /=(float val);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	単項マイナス
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec2 operator -() const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	正規化する
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec2& normalize();
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定の少数点以下の桁数で切り捨てる
			@param[in]	len	桁数
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec2& floor(int len);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定の少数点以下の桁数で四捨五入する
			@param[in]	len	桁数
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec2& round(int len);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定の少数点以下の桁数で切り上げる
			@param[in]	len	桁数
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec2& ceil(int len);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	相手との内積を返す
			@param[in]	vec1	値1
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline float dot(const Vec2& vec1) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	*thisの長さの2乗を返す
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline float lengthSqr() const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	*thisの長さを返す
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline float length() const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	*thisにNaNが含まれるかどうかを返す
			@return	含まれていたらtrue
			*/
			//--------------------------------------------------------------------------------------
			inline bool isNaN() const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	*thisに無限大が含まれるかどうかを返す
			@return	含まれていたらtrue
			*/
			//--------------------------------------------------------------------------------------
			inline bool isInfinite() const;

		};

		//--------------------------------------------------------------------------------------
		///	Vec3（3DVec）
		//--------------------------------------------------------------------------------------
		struct Vec3 : public XMFLOAT3
		{
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ
			*/
			//--------------------------------------------------------------------------------------
			inline Vec3();
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ
			@param[in]	vec	Vec3構造体
			*/
			//--------------------------------------------------------------------------------------
			inline Vec3(const Vec3& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ(zは0)
			@param[in]	vec	Vec2構造体
			*/
			//--------------------------------------------------------------------------------------
			explicit inline Vec3(const Vec2& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ(wは無視される)
			@param[in]	vec	Vec4構造体
			*/
			//--------------------------------------------------------------------------------------
			explicit inline Vec3(const Vec4& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ
			@param[in]	v	XMFLOAT3構造体
			*/
			//--------------------------------------------------------------------------------------
			explicit inline Vec3(const XMFLOAT3& v);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ
			@param[in]	x	X値
			@param[in]	y	Y値
			@param[in]	z	Z値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec3(float x, float y, float z);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ（同じ値に初期化）
			@param[in]	val	値
			*/
			//--------------------------------------------------------------------------------------
			explicit inline Vec3(float val);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ（XMVECTORで初期化）
			@param[in]	vec	値
			*/
			//--------------------------------------------------------------------------------------
			explicit inline Vec3(const XMVECTOR& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	XMVECTORへのキャスト（thisをキャストして返す）
			@return	XMVECTOR型の値
			*/
			//--------------------------------------------------------------------------------------
			inline operator XMVECTOR() const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	Vec2からの代入(zは0)
			@param[in]	other	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec3& operator =(const Vec2& other);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	Vec3からの代入
			@param[in]	other	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec3& operator =(const Vec3& other);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	Vec4からの代入(wは無視される)
			@param[in]	other	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec3& operator =(const Vec4& other);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	XMFLOAT3からの代入
			@param[in]	other	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec3& operator=(const XMFLOAT3& other);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	XMVECTORからの代入
			@param[in]	other	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec3& operator=(const XMVECTOR& other);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	Vec3と同値チェック
			@param[in]	other	相手
			@return	同値ならtrue
			*/
			//--------------------------------------------------------------------------------------
			inline bool operator==(const Vec3& other) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	Vec3と非同値チェック
			@param[in]	other	相手
			@return	非同値ならtrue
			*/
			//--------------------------------------------------------------------------------------
			inline bool operator!=(const Vec3& other)const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	インデックスによるの代入
			@param[in]	idx	0=X,1=Y,2=Z
			@param[in]	value	値
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec3& setElem(int idx, float value);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	インデックスによる値の参照
			@param[in]	idx	0=X,1=Y,2=Z
			@return	値
			*/
			//--------------------------------------------------------------------------------------
			inline float getElem(int idx) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	[]による値の代入
			@param[in]	idx	0=X,1=Y,2=Z
			@return	値
			*/
			//--------------------------------------------------------------------------------------
			inline float& operator [](int idx);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	[]による値の参照
			@param[in]	idx	0=X,1=Y,2=Z
			@return	値
			*/
			//--------------------------------------------------------------------------------------
			inline float operator [](int idx) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	加算
			@param[in]	vec	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec3 operator +(const Vec3& vec) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	加算
			@param[in]	val	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec3 operator +(float val) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	減算
			@param[in]	vec	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec3 operator -(const Vec3& vec) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	減算
			@param[in]	val	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec3 operator -(float val) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	乗算（Vec3）
			@param[in]	vec	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec3 operator *(const Vec3& vec) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	乗算（float）
			@param[in]	val	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec3 operator *(float val) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	乗算（Mat3x3）
			@param[in]	mat	行列
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec3 operator *(const Mat3x3& mat) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	乗算（Mat3x3）
			@param[in]	mat	行列
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec3 operator *(const Mat4x4& mat) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	除算（Vec3）
			@param[in]	vec	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec3 operator /(const Vec3& vec) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	除算（float）
			@param[in]	val	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec3 operator /(float val) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追加算
			@param[in]	vec	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec3& operator +=(const Vec3& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追加算
			@param[in]	val	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec3& operator +=(float val);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追減算
			@param[in]	vec	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec3& operator -=(const Vec3& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追減算
			@param[in]	val	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec3& operator -=(float val);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追乗算
			@param[in]	vec	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec3& operator *=(const Vec3& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追乗算
			@param[in]	val	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec3& operator *=(float val);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追乗算
			@param[in]	mat	行列
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec3& operator *=(const Mat3x3& mat);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追乗算
			@param[in]	mat	行列
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec3& operator *=(const Mat4x4& mat);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追除算
			@param[in]	vec	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec3& operator /=(const Vec3& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追除算
			@param[in]	val	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec3& operator /=(float val);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	単項マイナス
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec3 operator -() const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	正規化する
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec3& normalize();
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定の少数点以下の桁数で切り捨てる
			@param[in]	len	桁数
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec3& floor(int len);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定の少数点以下の桁数で四捨五入する
			@param[in]	len	桁数
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec3& round(int len);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定の少数点以下の桁数で切り上げる
			@param[in]	len	桁数
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec3& ceil(int len);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	相手との内積を返す
			@param[in]	vec1	値1
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline float dot(const Vec3& vec1)const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	相手との外積を設定する
			@param[in]	vec1	値1
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec3& cross(const Vec3& vec1);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	*thisの長さの2乗を返す
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline float lengthSqr()const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	*thisの長さを返す
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline float length()const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	反発するベクトルを設定する
			@param[in]	normal	反発に使用する法線
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec3& reflect(const Vec3& normal);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	*thisにNaNが含まれるかどうかを返す
			@return	含まれていたらtrue
			*/
			//--------------------------------------------------------------------------------------
			inline bool isNaN() const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	*thisに無限大が含まれるかどうかを返す
			@return	含まれていたらtrue
			*/
			//--------------------------------------------------------------------------------------
			inline bool isInfinite() const;
		};

		//--------------------------------------------------------------------------------------
		///	Vec4（4DVec）
		//--------------------------------------------------------------------------------------
		struct Vec4 : public XMFLOAT4
		{
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ
			*/
			//--------------------------------------------------------------------------------------
			inline Vec4();
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ
			@param[in]	vec	Vec4構造体
			*/
			//--------------------------------------------------------------------------------------
			inline Vec4(const Vec4& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ(z,wは0)
			@param[in]	vec	Vec3構造体
			*/
			//--------------------------------------------------------------------------------------
			explicit inline Vec4(const Vec2& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ(wは0)
			@param[in]	vec	Vec3構造体
			*/
			//--------------------------------------------------------------------------------------
			explicit inline Vec4(const Vec3& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ
			@param[in]	vec	Vec3構造体
			@param[in]	_w	W値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec4(const Vec3& vec, float _w);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ
			@param[in]	v	XMFLOAT2構造体
			*/
			//--------------------------------------------------------------------------------------
			explicit inline Vec4(const XMFLOAT2& v);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ
			@param[in]	v	XMFLOAT3構造体
			*/
			//--------------------------------------------------------------------------------------
			explicit inline Vec4(const XMFLOAT3& v);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ
			@param[in]	v	XMFLOAT4構造体
			*/
			//--------------------------------------------------------------------------------------
			explicit inline Vec4(const XMFLOAT4& v);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ
			@param[in]	x	X値
			@param[in]	y	Y値
			@param[in]	z	Z値
			@param[in]	w	W値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec4(float x, float y, float z, float w);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ（同じ値に初期化）
			@param[in]	val	値
			*/
			//--------------------------------------------------------------------------------------
			explicit inline Vec4(float val);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ（XMVECTORで初期化）
			@param[in]	vec	値
			*/
			//--------------------------------------------------------------------------------------
			explicit inline Vec4(const XMVECTOR& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	XMVECTORへのキャスト（thisをキャストして返す）
			@return	XMVECTOR型の値
			*/
			//--------------------------------------------------------------------------------------
			inline operator XMVECTOR() const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	Vec3へのキャスト（thisをキャストして返す）
			@return	Vec3型の値
			*/
			//--------------------------------------------------------------------------------------
			inline operator Vec3() const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	Vec2からの代入(z,wは0になる)
			@param[in]	other	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec4& operator =(const Vec2& other);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	Vec3からの代入(wは0になる)
			@param[in]	other	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec4& operator =(const Vec3& other);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	Vec4からの代入
			@param[in]	other	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec4& operator =(const Vec4& other);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	XMFLOAT4からの代入
			@param[in]	other	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec4& operator=(const XMFLOAT4& other);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	XMVECTORからの代入
			@param[in]	other	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec4& operator=(const XMVECTOR& other);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	Vec4と同値チェック
			@param[in]	other	相手
			@return	同値ならtrue
			*/
			//--------------------------------------------------------------------------------------
			inline bool operator==(const Vec4& other)const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	Vec3と非同値チェック
			@param[in]	other	相手
			@return	非同値ならtrue
			*/
			//--------------------------------------------------------------------------------------
			inline bool operator!=(const Vec4& other)const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	インデックスによるの代入
			@param[in]	idx	0=X,1=Y,2=Z,3=W
			@param[in]	value	値
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec4& setElem(int idx, float value);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	インデックスによる値の参照
			@param[in]	idx	0=X,1=Y,2=Z,3=W
			@return	値
			*/
			//--------------------------------------------------------------------------------------
			inline float getElem(int idx) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	[]による値の代入
			@param[in]	idx	0=X,1=Y,2=Z,3=W
			@return	値
			*/
			//--------------------------------------------------------------------------------------
			inline float& operator [](int idx);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	[]による値の参照
			@param[in]	idx	0=X,1=Y,2=Z,3=W
			@return	値
			*/
			//--------------------------------------------------------------------------------------
			inline float operator [](int idx) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	加算
			@param[in]	vec	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec4 operator +(const Vec4& vec) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	加算
			@param[in]	val	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec4 operator +(float val) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	減算
			@param[in]	vec	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec4 operator -(const Vec4& vec) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	減算
			@param[in]	val	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec4 operator -(float val) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	乗算
			@param[in]	vec	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec4 operator *(const Vec4& vec) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	乗算（float）
			@param[in]	val	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec4 operator *(float val) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	乗算（Mat3x3）
			@param[in]	mat	行列
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec4 operator *(const Mat3x3& mat) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	乗算（Mat3x3）
			@param[in]	mat	行列
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec4 operator *(const Mat4x4& mat) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	除算
			@param[in]	vec	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec4 operator /(const Vec4& vec) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	除算（float）
			@param[in]	val	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec4 operator /(float val) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追加算
			@param[in]	vec	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec4& operator +=(const Vec4& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追加算
			@param[in]	val	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec4& operator +=(float val);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追減算
			@param[in]	vec	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec4& operator -=(const Vec4& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追減算
			@param[in]	val	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec4& operator -=(float val);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追乗算
			@param[in]	vec	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec4& operator *=(const Vec4& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追乗算
			@param[in]	val	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec4& operator *=(float val);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追乗算
			@param[in]	mat	行列
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec4& operator *=(const Mat3x3& mat);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追乗算
			@param[in]	mat	行列
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec4& operator *=(const Mat4x4& mat);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追除算
			@param[in]	vec	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec4& operator /=(const Vec4& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追除算
			@param[in]	val	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Vec4& operator /=(float val);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	単項マイナス
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec4 operator -() const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	正規化する
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec4& normalize();
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定の少数点以下の桁数で切り捨てる
			@param[in]	len	桁数
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec4& floor(int len);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定の少数点以下の桁数で四捨五入する
			@param[in]	len	桁数
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec4& round(int len);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定の少数点以下の桁数で切り上げる
			@param[in]	len	桁数
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec4& ceil(int len);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	相手との内積を返す
			@param[in]	vec1	値1
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline float dot(const Vec4& vec1)const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	*thisの長さの2乗を返す
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline float lengthSqr()const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	*thisの長さを返す
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline float length()const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	*thisにNaNが含まれるかどうかを返す
			@return	含まれていたらtrue
			*/
			//--------------------------------------------------------------------------------------
			inline bool isNaN() const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	*thisに無限大が含まれるかどうかを返す
			@return	含まれていたらtrue
			*/
			//--------------------------------------------------------------------------------------
			inline bool isInfinite() const;
		};



		//--------------------------------------------------------------------------------------
		///	Quat（クオータニオン）
		//--------------------------------------------------------------------------------------
		struct Quat : public XMFLOAT4
		{
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ
			*/
			//--------------------------------------------------------------------------------------
			inline Quat();
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ
			@param[in]	quat	Quat構造体
			*/
			//--------------------------------------------------------------------------------------
			inline Quat(const Quat& quat);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ
			@param[in]	v	XMFLOAT4構造体
			*/
			//--------------------------------------------------------------------------------------
			explicit inline Quat(const XMFLOAT4& v);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ
			@param[in]	x	X値
			@param[in]	y	Y値
			@param[in]	z	Z値
			@param[in]	w	W値
			*/
			//--------------------------------------------------------------------------------------
			inline Quat(float x, float y, float z, float w);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ
			@param[in]	vec	回転軸(Vec3)
			@param[in]	r	回転角度（ラジアン）
			*/
			//--------------------------------------------------------------------------------------
			inline Quat(const Vec3& vec, float r);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ（XMVECTORで初期化）
			@param[in]	vec	値
			*/
			//--------------------------------------------------------------------------------------
			explicit inline Quat(const XMVECTOR& other);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	XMVECTORへのキャスト（thisをキャストして返す）
			@return	XMVECTOR型の値
			*/
			//--------------------------------------------------------------------------------------
			inline operator XMVECTOR() const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	Quatからの代入
			@param[in]	quat	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Quat& operator =(const Quat& quat);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	XMFLOAT4からの代入
			@param[in]	other	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Quat& operator=(const XMFLOAT4& other);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	XMVECTORからの代入
			@param[in]	other	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Quat& operator=(const XMVECTOR& other);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	Quatと同値チェック
			@param[in]	other	相手
			@return	同値ならtrue
			*/
			//--------------------------------------------------------------------------------------
			inline bool operator==(const Quat& other)const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	Quatと非同値チェック
			@param[in]	other	相手
			@return	非同値ならtrue
			*/
			//--------------------------------------------------------------------------------------
			inline bool operator!=(const Quat& other)const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	インデックスによるの代入
			@param[in]	idx	0=X,1=Y,2=Z,3=w
			@param[in]	value	値
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Quat& setElem(int idx, float value);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	インデックスによる値の参照
			@param[in]	idx	0=X,1=Y,2=Z,3=w
			@return	値
			*/
			//--------------------------------------------------------------------------------------
			inline float getElem(int idx) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	[]による値の代入
			@param[in]	idx	0=X,1=Y,2=Z,3=w
			@return	値
			*/
			//--------------------------------------------------------------------------------------
			inline float& operator [](int idx);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	[]による値の参照
			@param[in]	idx	0=X,1=Y,2=Z
			@return	値
			*/
			//--------------------------------------------------------------------------------------
			inline float operator [](int idx) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	加算
			@param[in]	quat	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Quat operator +(const Quat& quat) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	減算
			@param[in]	quat	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Quat operator -(const Quat& quat) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	乗算
			@param[in]	quat	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Quat operator *(const Quat& quat) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	乗算(float)
			@param[in]	val	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Quat operator *(float val) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追乗算（Quat）
			@param[in]	quat	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Quat& operator *=(const Quat& quat);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	正規化する
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Quat& normalize();
			//--------------------------------------------------------------------------------------
			/*!
			@brief	相手との内積を返す
			@param[in]	quat	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline float dot(const Quat& quat)const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	相手との共役を返す
			@param[in]	quat	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Quat& conjugate(const Quat& quat);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	単位クオータニオンを設定する
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline  Quat& identity();
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定の軸回転のクオータニオンを設定する
			@param[in]	unitVec 回転軸
			@param[in]	radians 回転値
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Quat& rotationAxis(const Vec3& unitVec, float radians);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	回転ベクトルからクオータニオンを設定する
			@param[in]	rotVec 回転ベクトル
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Quat& rotationRollPitchYawFromVector(const Vec3& rotVec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	クォータニオンを回転ベクトルに変換して返す
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec3 toRotVec() const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	*thisの逆クォータニオンを設定する
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Quat& inverse();
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定した法線の方向を向く回転を設定する
			@param[in]	norm 法線
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Quat& facing(const Vec3& norm);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定した法線のY軸のみ方向を向く回転を設定する
			@param[in]	norm 法線
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Quat& facingY(const Vec3& norm);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	*thisにNaNが含まれるかどうかを返す
			@return	含まれていたらtrue
			*/
			//--------------------------------------------------------------------------------------
			inline bool isNaN() const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	*thisに無限大が含まれるかどうかを返す
			@return	含まれていたらtrue
			*/
			//--------------------------------------------------------------------------------------
			inline bool isInfinite() const;
		};


		//--------------------------------------------------------------------------------------
		///	Mat3x3 (「Major」優先の3x3行列)
		//--------------------------------------------------------------------------------------
		struct Mat3x3 : public XMFLOAT3X3
		{
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ
			*/
			//--------------------------------------------------------------------------------------
			inline Mat3x3();
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ
			@param[in]	mat	Mat3x3構造体
			*/
			//--------------------------------------------------------------------------------------
			inline Mat3x3(const Mat3x3& mat);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ(major)
			@param[in]	major0	Majorの0番目
			@param[in]	major1	Majorの1番目
			@param[in]	major2	Majorの2番目
			*/
			//--------------------------------------------------------------------------------------
			inline Mat3x3(const Vec3& major0, const Vec3& major1, const Vec3& major2);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ(Quat)
			@param[in]	unitQuat	クオータニオン
			*/
			//--------------------------------------------------------------------------------------
			explicit inline Mat3x3(const Quat& unitQuat);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ（XMFLOAT3X3で初期化）
			@param[in]	other	値
			*/
			//--------------------------------------------------------------------------------------
			explicit inline Mat3x3(const XMFLOAT3X3& other);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ（XMMATRIXで初期化）
			@param[in]	other	値
			*/
			//--------------------------------------------------------------------------------------
			explicit inline Mat3x3(const XMMATRIX& other);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	XMMATRIXへのキャスト（thisをキャストして返す）
			@return	XMMATRIX型の値
			*/
			//--------------------------------------------------------------------------------------
			inline operator XMMATRIX() const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	Mat3x3からの代入
			@param[in]	mat	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat3x3& operator =(const Mat3x3& mat);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	XMFLOAT3X3からの代入
			@param[in]	other	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat3x3& operator=(const XMFLOAT3X3& other);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	XMMATRIXからの代入
			@param[in]	other	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat3x3& operator=(const XMMATRIX& other);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	Mat3x3と同値チェック
			@param[in]	other	相手
			@return	同値ならtrue
			*/
			//--------------------------------------------------------------------------------------
			inline bool operator==(const Mat3x3& other)const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	Mat3x3と非同値チェック
			@param[in]	other	相手
			@return	非同値ならtrue
			*/
			//--------------------------------------------------------------------------------------
			inline bool operator!=(const Mat3x3& other)const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定のMajorの設定
			@param[in]	major	Majorの番号
			@param[in]	vec	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Mat3x3& setMajor(int major, const Vec3& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定のMinorの設定
			@param[in]	minor	Minorの番号
			@param[in]	vec	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Mat3x3& setMinor(int minor, const Vec3& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定のMajorの取得
			@param[in]	major	Majorの番号
			@return	値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec3 getMajor(int major) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定のMinorの取得
			@param[in]	minor	Minorの番号
			@return	値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec3 getMinor(int minor) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定のMajorの設定、[]で指定
			@param[in]	major	Majorの番号
			@return	値の参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec3& operator [](int major);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定のMajorの参照、[]で指定
			@param[in]	major	Majorの番号
			@return	値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec3 operator [](int major) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定の行、列に値の設定
			@param[in]	major	Majorの番号
			@param[in]	minor	Minorの番号
			@param[in]	val	設定する値
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat3x3& setElem(int major, int minor, float val);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定の行、列に値の取得
			@param[in]	major	Majorの番号
			@param[in]	minor	Minorの番号
			@return	値
			*/
			//--------------------------------------------------------------------------------------
			inline float getElem(int major, int minor) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	加算
			@param[in]	mat	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Mat3x3 operator +(const Mat3x3& mat) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	減算
			@param[in]	mat	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Mat3x3 operator -(const Mat3x3& mat) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	単項マイナス
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Mat3x3 operator -() const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	乗算（float）
			@param[in]	val	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Mat3x3 operator *(float val) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	乗算（Vec3）
			@param[in]	vec	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec3 operator *(const Vec3& vec) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	乗算（Mat3x3）
			@param[in]	mat	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Mat3x3 operator *(const Mat3x3& mat) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追加算
			@param[in]	mat	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat3x3& operator +=(const Mat3x3& mat);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追減算
			@param[in]	mat	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat3x3& operator -=(const Mat3x3& mat);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追乗算（float）
			@param[in]	val	値
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat3x3& operator *=(float val);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追乗算（Mat3x3）
			@param[in]	mat	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat3x3& operator *=(const Mat3x3& mat);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	単位行列を設定する
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat3x3& identity();
			//--------------------------------------------------------------------------------------
			/*!
			@brief	スケーリング行列を設定する
			@param[in]	scaleVec	値
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat3x3& scale(const Vec3& scaleVec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	クオータニオンによる回転行列を設定する
			@param[in]	unitQuat	値
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat3x3& rotation(const Quat& unitQuat);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	転置する
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat3x3& transpose();
			//--------------------------------------------------------------------------------------
			/*!
			@brief	逆行列を設定する
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat3x3& inverse();
			//--------------------------------------------------------------------------------------
			/*!
			@brief	クロス行列を作成する
			@param[in]	vec	元になる値
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat3x3& crossMatrix(const Vec3& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	this行列内のX軸傾きを取得する。
			@return	X軸の傾き
			*/
			//--------------------------------------------------------------------------------------
			Vec3 rotXInMatrix()const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	this行列内のY軸傾きを取得する。
			@return	Y軸の傾き
			*/
			//--------------------------------------------------------------------------------------
			Vec3 rotYInMatrix()const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	this行列内のZ軸傾きを取得する。
			@return	Z軸の傾き
			*/
			//--------------------------------------------------------------------------------------
			Vec3 rotZInMatrix()const;
		};

		//--------------------------------------------------------------------------------------
		///	Mat4x4 (「Major」優先の4x4行列)
		//--------------------------------------------------------------------------------------
		struct Mat4x4 : public XMFLOAT4X4
		{
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4();
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ
			@param[in]	mat	Mat4x4構造体
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4(const Mat4x4& mat);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ
			@param[in]	mat	aiMatrix4x4構造体
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4(const aiMatrix4x4& mat);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ(major)
			@param[in]	major0	Majorの0番目
			@param[in]	major1	Majorの1番目
			@param[in]	major2	Majorの2番目
			@param[in]	major3	Majorの3番目
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4(const Vec3& major0, const Vec3& major1, const Vec3& major2, const Vec3& major3);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ(major)
			@param[in]	major0	Majorの0番目
			@param[in]	major1	Majorの1番目
			@param[in]	major2	Majorの2番目
			@param[in]	major3	Majorの3番目
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4(const Vec4& major0, const Vec4& major1, const Vec4& major2, const Vec4& major3);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ(3x3行列と位置)
			@param[in]	tfrm	3x3行列
			@param[in]	translateVec	位置
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4(const Mat3x3& tfrm, const Vec3& translateVec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ(Quatと位置)
			@param[in]	unitQuat	Quat
			@param[in]	translateVec	位置
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4(const Quat& unitQuat, const Vec3& translateVec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ(Quat)
			@param[in]	unitQuat	クオータニオン
			*/
			//--------------------------------------------------------------------------------------
			explicit inline Mat4x4(const Quat& unitQuat);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ（XMFLOAT4X4で初期化）
			@param[in]	other	値
			*/
			//--------------------------------------------------------------------------------------
			explicit inline Mat4x4(const XMFLOAT4X4& other);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	コンストラクタ（XMMATRIXで初期化）
			@param[in]	other	値
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4(const XMMATRIX& other);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	XMMATRIXへのキャスト（thisをキャストして返す）
			@return	XMMATRIX型の値
			*/
			//--------------------------------------------------------------------------------------
			inline operator XMMATRIX() const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	Mat4x4からの代入
			@param[in]	mat	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& operator =(const Mat4x4& mat);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	XMFLOAT4X4からの代入
			@param[in]	other	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& operator=(const XMFLOAT4X4& other);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	XMMATRIXからの代入
			@param[in]	other	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& operator=(const XMMATRIX& other);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	Mat4x4と同値チェック
			@param[in]	other	相手
			@return	同値ならtrue
			*/
			//--------------------------------------------------------------------------------------
			inline bool operator==(const Mat4x4& other)const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	Mat4x4と非同値チェック
			@param[in]	other	相手
			@return	非同値ならtrue
			*/
			//--------------------------------------------------------------------------------------
			inline bool operator!=(const Mat4x4& other)const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	Mat4x4と同値チェック(UINTで判断)
			@param[in]	other	相手
			@return	同値ならtrue
			*/
			//--------------------------------------------------------------------------------------
			inline bool equalInt(const Mat4x4& other)const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	Mat4x4と近似チェック
			@param[in]	other	相手
			@param[in]	epsilon	近似制限値
			@return	近似ならtrue
			*/
			//--------------------------------------------------------------------------------------
			inline bool nearEqual(const Mat4x4& other, float epsilon)const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	3x3の部分にセット
			@param[in]	mat3	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& setUpper3x3(const Mat3x3& mat3);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	3x3の部分を取得
			@return	3x3の部分
			*/
			//--------------------------------------------------------------------------------------
			inline const Mat3x3 getUpper3x3() const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	位置の部分にセット
			@param[in]	translateVec	相手
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& setTranslation(const Vec3& translateVec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	位置の部分を取得
			@return	位置の部分
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec3 getTranslation() const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定のMajorの設定
			@param[in]	major	Majorの番号
			@param[in]	vec	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& setMajor(int major, const Vec3& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定のMajorの設定
			@param[in]	major	Majorの番号
			@param[in]	vec	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& setMajor(int major, const Vec4& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定のMinorの設定
			@param[in]	minor	Minorの番号
			@param[in]	vec	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& setMinor(int minor, const Vec3& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定のMinorの設定
			@param[in]	minor	Minorの番号
			@param[in]	vec	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& setMinor(int minor, const Vec4& vec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定のMajorの取得
			@param[in]	major	Majorの番号
			@return	値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec4 getMajor(int major) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定のMinorの取得
			@param[in]	minor	Minorの番号
			@return	値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec4 getMinor(int minor) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定のMajorの設定、[]で指定
			@param[in]	major	Majorの番号
			@return	値の参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec4& operator [](int major);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定のMajorの参照、[]で指定
			@param[in]	major	Majorの番号
			@return	値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec4 operator [](int major) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定の行、列に値の設定
			@param[in]	major	Majorの番号
			@param[in]	minor	Minorの番号
			@param[in]	val	設定する値
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& setElem(int major, int minor, float val);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	指定の行、列に値の取得
			@param[in]	major	Majorの番号
			@param[in]	minor	Minorの番号
			@return	値
			*/
			//--------------------------------------------------------------------------------------
			inline float getElem(int major, int minor) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	加算
			@param[in]	mat	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Mat4x4 operator +(const Mat4x4& mat) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	減算
			@param[in]	mat	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Mat4x4 operator -(const Mat4x4& mat) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	単項マイナス
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Mat4x4 operator -() const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	乗算（float）
			@param[in]	val	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Mat4x4 operator *(float val) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	乗算（Vec3）
			@param[in]	vec	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec3 operator *(const Vec3& vec) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	乗算（Vec4）
			@param[in]	vec	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Vec4 operator *(const Vec4& vec) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	乗算（Mat3x3）
			@param[in]	mat	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Mat4x4 operator *(const Mat3x3& mat) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	乗算（Mat4x4）
			@param[in]	mat	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline const Mat4x4 operator *(const Mat4x4& mat) const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追加算
			@param[in]	mat	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& operator +=(const Mat4x4& mat);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追減算
			@param[in]	mat	相手
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& operator -=(const Mat4x4& mat);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	追乗算（float）
			@param[in]	val	値
			@return	演算後の値
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& operator *=(float val);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	変換行列の追加乗算
			@param[in]	tfrm	追加変換する値
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& operator *=(const Mat4x4& tfrm);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	変換行列の追加乗算(Mat3x3)
			@param[in]	tfrm	追加変換する値
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& operator *=(const Mat3x3& tfrm);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	行列から各値を取り出す（例外の場合あり）
			@param[in]	tfrm	追加変換する値
			@return	なし
			*/
			//--------------------------------------------------------------------------------------
			inline void decompose(Vec3& rScaling, Quat& rQt, Vec3& rTranslation)const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	行列からスケーリングを取り出す（例外の場合あり）
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec3 scaleInMatrix()const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	行列からクォータニオンを取り出す（例外の場合あり）
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Quat quatInMatrix()const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	行列から平行移動を取り出す
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Vec3 transInMatrix()const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	単位行列を設定する
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& identity();
			//--------------------------------------------------------------------------------------
			/*!
			@brief	現在の行列をスケーリング1.0に設定する
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& scaleIdentity();
			//--------------------------------------------------------------------------------------
			/*!
			@brief	スケーリング行列を設定する
			@param[in]	scaleVec	値
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& scale(const Vec3& scaleVec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	クオータニオンによる回転行列を設定する
			@param[in]	unitQuat	値
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& rotation(const Quat& unitQuat);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	ベクトルによる移動行列を設定する
			@param[in]	transVec	値
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& translation(const Vec3& transVec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	転置する
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& transpose();
			//--------------------------------------------------------------------------------------
			/*!
			@brief	逆行列を設定する
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& inverse();
			//--------------------------------------------------------------------------------------
			/*!
			@brief	2Dアフィン変換を実装する
			@param[in]	scaleVec　スケーリング
			@param[in]	rotOrigin　回転の中心
			@param[in]	rotation	回転値（ラジアン）
			@param[in]	transVec	移動
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& affineTransformation2D(
				const Vec2& scaleVec,
				const Vec2& rotOrigin,
				const float& rotation,
				const Vec2& transVec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	アフィン変換を実装する
			@param[in]	scaleVec　スケーリング
			@param[in]	rotOrigin　回転の中心
			@param[in]	unitQuat	クォータニオン
			@param[in]	transVec	移動
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& affineTransformation(
				const Vec3& scaleVec,
				const Vec3& rotOrigin,
				const Quat& unitQuat,
				const Vec3& transVec);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	LookAtLHビュー行列を作成する
			@param[in]	eye　カメラ位置
			@param[in]	at　カメラ視点
			@param[in]	up	カメラ向き
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& lookatLH(
				const Vec3& eye,
				const Vec3& at,
				const Vec3& up);

			//--------------------------------------------------------------------------------------
			/*!
			@brief	LookAtRHビュー行列を作成する
			@param[in]	eye　カメラ位置
			@param[in]	at　カメラ視点
			@param[in]	up	カメラ向き
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& lookatRH(
				const Vec3& eye,
				const Vec3& at,
				const Vec3& up);

			//--------------------------------------------------------------------------------------
			/*!
			@brief	遠近法の行列を作成する(左手)
			@param[in]	fovY　カメラ位画角
			@param[in]	aspectRatio　縦横比
			@param[in]	nearPlane	手前位置
			@param[in]	farPlane	奥位置
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& perspectiveFovLH(
				float fovY,
				float aspectRatio,
				float nearPlane,
				float farPlane
			);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	遠近法の行列を作成する（右手）
			@param[in]	fovY　カメラ位画角
			@param[in]	aspectRatio　縦横比
			@param[in]	nearPlane	手前位置
			@param[in]	farPlane	奥位置
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& perspectiveFovRH(
				float fovY,
				float aspectRatio,
				float nearPlane,
				float farPlane
			);

			//--------------------------------------------------------------------------------------
			/*!
			@brief	OrthographicLH射影行列を作成する
			@param[in]	width　幅
			@param[in]	height　高さ
			@param[in]	n	手前
			@param[in]	f	 奥
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& orthographicLH(
				float width,
				float height,
				float n,
				float f);
			//--------------------------------------------------------------------------------------
			/*!
			@brief	OrthographicRH射影行列を作成する
			@param[in]	width　幅
			@param[in]	height　高さ
			@param[in]	n	手前
			@param[in]	f	 奥
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& orthographicRH(
				float width,
				float height,
				float n,
				float f);

			//--------------------------------------------------------------------------------------
			/*!
			@brief	str変換(Scele,translation,rotation)を実装する
			@param[in]	scaleVec　スケーリング
			@param[in]	transVec	移動
			@param[in]	unitQuat	クォータニオン
			@return	*thisの参照
			*/
			//--------------------------------------------------------------------------------------
			inline Mat4x4& strTransformation(
				const Vec3& scaleVec,
				const Vec3& transVec,
				const Quat& unitQuat
			);

			//--------------------------------------------------------------------------------------
			/*!
			@brief	this行列内のX軸傾きを取得する。スケーリングに0があった場合近似値になる
			@return	X軸の傾き
			*/
			//--------------------------------------------------------------------------------------
			Vec3 rotXInMatrix()const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	this行列内のY軸傾きを取得する。スケーリングに0があった場合近似値になる
			@return	Y軸の傾き
			*/
			//--------------------------------------------------------------------------------------
			Vec3 rotYInMatrix()const;
			//--------------------------------------------------------------------------------------
			/*!
			@brief	this行列内のZ軸傾きを取得する。スケーリングに0があった場合近似値になる
			@return	Z軸の傾き
			*/
			//--------------------------------------------------------------------------------------
			Vec3 rotZInMatrix()const;

		};


		//--------------------------------------------------------------------------------------
		///	ユーティリティ（static呼び出しをする）
		//--------------------------------------------------------------------------------------
		struct bsmUtil {
			template<typename T>
			static float length(const T& v) {
				return v.length();
			}

			template<typename T>
			static float dot(const T& v1, const T& v2) {
				T temp(v1);
				return temp.dot(v2);
			}

			static Vec3 cross(const Vec3& v1, const Vec3& v2) {
				Vec3 temp(v1);
				return temp.cross(v2);
			}

			template<typename T>
			static T normalize(const T& v) {
				T tmp(v);
				tmp.normalize();
				return tmp;
			}

			static float floor(float f, int len) {
				double ret;

				ret = (double)f * pow(10.0, len);
				ret = (double)(int)(ret);

				return (float)(ret * pow(10.0, -len));

			}

			static float round(float f, int len) {
				double	ret;

				ret = (double)f * pow(10.0, len);
				ret = (double)(int)(ret + 0.5);

				return (float)(ret * pow(10.0, -len));

			}

			static float ceil(float f, int len) {
				double	ret;

				ret = (double)f * pow(10.0, len);
				ret = (double)(int)(ret + 0.9);

				return (float)(ret * pow(10.0, -len));

			}


			template<typename T>
			static float lengthSqr(const T& v) {
				T tmp(v);
				return tmp.lengthSqr();

			}

			static float angleBetweenNormals(const Vec3& norm11, const Vec3& norm2) {
				return ((Vec3)XMVector3AngleBetweenNormals(norm11, norm2)).x;
			}

			static Mat4x4 transpose(const bsm::Mat4x4& mat) {
				return  (Mat4x4)XMMatrixTranspose(mat);
			}




			static physx::PxVec3 ToPxVec3(const Vec3& v) {
				return physx::PxVec3(v.x, v.y, v.z);
			}

			static physx::PxQuat ToPxQuat(const Quat& q) {
				return physx::PxQuat(q.x, q.y, q.z, q.w);
			}

			static physx::PxTransform ToPxTransform(const Vec3& position, const Quat& quaternion) {
				return physx::PxTransform(ToPxVec3(position), ToPxQuat(quaternion));
			}

			static Vec3 ToVec3(const physx::PxVec3& v) {
				return Vec3(v.x, v.y, v.z);
			}

			static Quat ToQuat(const physx::PxQuat& q) {
				return Quat(q.x, q.y, q.z, q.w);
			}







		};



	}
	// end namespace bsm
}
// end namespace basecross
#include "BaseMathInc.h"
