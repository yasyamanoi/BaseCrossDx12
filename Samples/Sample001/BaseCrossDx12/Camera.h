/*!
@file BaseCamera.h
@brief カメラクラス
@copyright WiZ Tamura Hiroki,Yamanoi Yasushi MIT License (MIT).
 MIT License URL: https://opensource.org/license/mit
*/


#pragma once
#include "stdafx.h"

namespace basecross {

	//--------------------------------------------------------------------------------------
	//	カメラ親クラス
	//--------------------------------------------------------------------------------------
	class Camera : public ObjectInterface {
	protected:
		Vec3 m_eye;	//カメラ位置　
		Vec3 m_at;	//注目点
		Vec3 m_up;   //カメラの傾き（アップ）

		float m_near;	//手前の最小距離
		float m_far;	//奥の最大距離
		Mat4x4 m_viewMatrix;
		Mat4x4 m_projMatrix;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	プロテクトコンストラクタ
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		Camera();
		virtual ~Camera() {}
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	カメラ位置の取得
		@return	カメラ位置
		*/
		//--------------------------------------------------------------------------------------
		virtual const Vec3& GetEye() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	カメラ位置の設定
		@param[in]	eye	カメラ位置
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetEye(const Vec3& eye);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	カメラ位置の設定
		@param[in]	x.y,z カメラ位置
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetEye(float x, float y, float z);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	カメラ視点の取得
		@return	カメラ視点
		*/
		//--------------------------------------------------------------------------------------
		virtual const Vec3& GetAt() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	カメラ視点の設定
		@param[in]	at	カメラ視点
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetAt(const Vec3& at);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	カメラ視点の設定
		@param[in]	x,y,z	カメラ視点
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetAt(float x, float y, float z);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	カメラ角度の取得
		@return	カメラ角度
		*/
		//--------------------------------------------------------------------------------------
		virtual const Vec3& GetUp() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	カメラ角度の設定
		@param[in]	up	カメラ角度（正規化済みのもの）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetUp(const Vec3& up);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	カメラ角度の設定
		@param[in]	x,y,z	カメラ角度（正規化済みのもの）
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetUp(float x, float y, float z);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	カメラ最近表示距離の取得
		@return	カメラ最近距離
		*/
		//--------------------------------------------------------------------------------------
		virtual float GetNear() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	カメラ最近表示距離の設定
		@param[in]	f	カメラ最近表示距離
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetNear(float f);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	カメラ最遠表示距離の取得
		@return	カメラ最遠距離
		*/
		//--------------------------------------------------------------------------------------
		virtual float GetFar() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	カメラ最遠表示距離の設定
		@param[in]	f	カメラ最遠表示距離
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetFar(float f);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	カメラ行列の計算
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void CalculateMatrix() = 0;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ビュー行列の取得
		@return	ビュー行列
		*/
		//--------------------------------------------------------------------------------------
		virtual const Mat4x4& GetViewMatrix() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	射影行列の取得
		@return	射影行列
		*/
		//--------------------------------------------------------------------------------------
		virtual const Mat4x4& GetProjMatrix() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	作成時の処理
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnCreate();
		//--------------------------------------------------------------------------------------
		/*!
		@brief	更新時の処理
		@param[in]	elapsedTime	全ターンからの経過時間
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnUpdate(double elapsedTime);
	};

	//--------------------------------------------------------------------------------------
	//	遠近法カメラ
	//--------------------------------------------------------------------------------------
	class PerspecCamera : public Camera {
		float m_fovY;   //射影角度
		float m_aspect;	//アスペクト比
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		PerspecCamera();
		virtual ~PerspecCamera() {}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	射影角度の取得
		@return	射影角度
		*/
		//--------------------------------------------------------------------------------------
		virtual float GetFovY() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	射影角度の設定
		@param[in]	f	射影角度
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetFovY(float f);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	アスペクト比の取得
		@return	アスペクト比
		*/
		//--------------------------------------------------------------------------------------
		virtual float GetAspect() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	アスペクト比の設定
		@param[in]	f	アスペクト比
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetAspect(float f);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	カメラ行列の計算
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void CalculateMatrix()override;
	};

	//--------------------------------------------------------------------------------------
	//	正射影法カメラ
	//--------------------------------------------------------------------------------------
	class OrthoCamera : public Camera {
		float m_width;	//遠近法を使わない場合（正射影）の幅
		float m_height;	//遠近法を使わない場合（正射影）の高さ
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		OrthoCamera();
		virtual ~OrthoCamera() {}
		//--------------------------------------------------------------------------------------
		/*!
		@brief	幅の取得
		@return	幅
		*/
		//--------------------------------------------------------------------------------------
		virtual float GetWidth() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	幅の設定
		@param[in]	f	幅
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetWidth(float f);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	高さの取得
		@return	高さ
		*/
		//--------------------------------------------------------------------------------------
		virtual float GetHeight() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	高さの設定
		@param[in]	f	高さ
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetHeight(float f);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	カメラ行列の計算
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void CalculateMatrix()override;
	};



}
// end namespace basecross
